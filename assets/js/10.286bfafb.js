(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{193:function(e,n,r){"use strict";r.r(n);var t=r(0),a=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,n=e.$createElement,r=e._self._c||n;return r("div",{staticClass:"content"},[r("h5",{attrs:{id:"引子"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#引子","aria-hidden":"true"}},[e._v("#")]),e._v(" 引子")]),e._v(" "),r("p",[e._v("今天想要把公司一个项目支持一下PWA,准备先自己做个demo，就使用了百度的LAVAS解决方案，在项目初始化的过程中报错，")]),e._v(" "),r("blockquote",[r("p",[e._v("(node:5536) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): RequestError: Error: tunneling socket could not be established, cause=connect ECONNREFUSED 127.0.0.1:1080\n(node:5536) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.")])]),e._v(" "),r("h5",{attrs:{id:"关于-unhandled-rejection"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#关于-unhandled-rejection","aria-hidden":"true"}},[e._v("#")]),e._v(" 关于 Unhandled Rejection")]),e._v(" "),r("p",[e._v("这是Promise 是一个异步操作的状态机，其可能处于这三种状态之一")]),e._v(" "),r("ul",[r("li",[e._v("pending：异步操作还在执行中")]),e._v(" "),r("li",[e._v("fulfilled：异步操作已经完成")]),e._v(" "),r("li",[e._v("rejected：异步操作执行失败")])]),e._v(" "),r("p",[e._v("在 Node.js 6.6.0 中增加了一个特性：对 Promise 中未处理的 rejection 默认会输出 UnhandledPromiseRejectionWarning 提示")]),e._v(" "),r("h5",{attrs:{id:"node-js版本管理工具"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#node-js版本管理工具","aria-hidden":"true"}},[e._v("#")]),e._v(" node.js版本管理工具")]),e._v(" "),r("p",[e._v("nvm-windows  https://github.com/coreybutler/nvm-windows\nn            https://github.com/tj/n")]),e._v(" "),r("p",[e._v("公司给配的电脑是windows系统的，一直用的node版本是8.9.4的，npm是5.6.0，所以需要切换node.js版本管理工具")]),e._v(" "),r("p",[e._v("我是用的nvm来管理我的node版本")]),e._v(" "),r("h4",{attrs:{id:"常用的指令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#常用的指令","aria-hidden":"true"}},[e._v("#")]),e._v(" 常用的指令")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("+ nvm arch [32|64]：显示节点是以32位还是64位模式运行。指定32或64以覆盖默认体系结构。\n+ nvm install <version> [arch]：版本可以是node.js版本，也可以是最新稳定版本的“最新版本”。（可选）指定是否安装32位或64位版本（默认为系统arch）。设置[arch]为“all”以安装32位和64位版本。\n+ nvm list [available]：列出node.js安装。available在末尾键入以显示可供下载的版本列表。\n+ nvm on：启用node.js版本管理。\n+ nvm off：禁用node.js版本管理（不卸载任何内容）。\n+ nvm proxy [url]：设置用于下载的代理。留[url]空白，以查看当前的代理。设置[url]为“none”以删除代理。\n+ nvm uninstall \\<version\\>：卸载特定版本。\n+ nvm use \\<version\\> [arch]：切换到使用指定的版本。（可选）指定32/64位架构。nvm use \\<arch\\>将继续使用所选版本，但根据提供的值切换到32/64位模式\\<arch\\>。有关use在特定目录（或使用.nvmrc）中使用的信息，请参阅问题＃16。\n+ nvm root \\<path\\>：设置nvm应存储不同版本node.js的目录。如果\\<path\\>未设置，将显示当前根。\n+ nvm version：显示NVM for Windows的当前运行版本。\n+ nvm node_mirror \\<node_mirror_url\\>：设置节点镜像。国内可以使用https://npm.taobao.org/mirrors/node/\n+ nvm npm_mirror \\<npm_mirror_url\\>：设置npm镜像。国内可以使用https://npm.taobao.org/mirrors/npm/\n\n")])])]),r("h4",{attrs:{id:"a"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#a","aria-hidden":"true"}},[e._v("#")]),e._v(" a")])])}],!1,null,null,null);n.default=a.exports}}]);